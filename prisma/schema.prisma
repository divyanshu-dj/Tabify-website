// // This is your Prisma schema file,
// // learn more about it in the docs: https://pris.ly/d/prisma-schema

// // Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// // Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  links         Link[]
  groupedTabs   GroupedTab[]
  numLinks       Int             @default(0)       // Number of links saved by the user
  numGroupedTabs Int             @default(0)       // Number of grouped tabs saved by the user
  subscription   Boolean         @default(false)   // Whether the user has a paid subscription
  storageUsed    Int             @default(0)       // Storage used by the user (in KB or MB)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

model Link {
  id          String     @id @default(cuid())
  userId      String     // Foreign key to User
  url         String     
  collection  String     @default("Unorganized") 
  title       String?    
  description String?    
  isPinned    Boolean    @default(false)
  importance  Int        @default(1) 
  thumbnail   String?    // Thumbnail URL
  tags        String[]   // Array of tags
  createdAt   DateTime   @default(now()) // Creation timestamp
  updatedAt   DateTime   @updatedAt      // Update timestamp

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model GroupedTab {
  id        String   @id @default(cuid())
  userId    String   // Foreign key to User
  name      String
  tabs      Json     // Array of tab objects (e.g., [{url, title, favicon}])
  createdAt DateTime @default(now()) // Creation timestamp
  updatedAt DateTime @updatedAt      // Update timestamp

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}